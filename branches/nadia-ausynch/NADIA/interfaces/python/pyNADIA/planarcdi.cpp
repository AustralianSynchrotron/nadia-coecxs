/* Generated by Cython 0.20.1post0 (Debian 0.20.1+git90-g0e6e38e-1ubuntu2) on Thu May  8 13:20:14 2014 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#define CYTHON_ABI "0_20_1post0"
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY
#define Py_OptimizeFlag 0
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define CYTHON_FORMAT_SSIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_As_int(o)
  #define PyNumber_Index(o)    ((PyNumber_Check(o) && !PyFloat_Check(o)) ? PyNumber_Int(o) : \
                                (PyErr_Format(PyExc_TypeError, \
                                              "expected index value, got %.200s", Py_TYPE(o)->tp_name), \
                                 (PyObject*)0))
  #define __Pyx_PyIndex_Check(o) (PyNumber_Check(o) && !PyFloat_Check(o) && \
                                  !PyComplex_Check(o))
  #define PyIndex_Check __Pyx_PyIndex_Check
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
  #define CYTHON_FORMAT_SSIZE_T "z"
  #define __Pyx_PyIndex_Check PyIndex_Check
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)
  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;
  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)
  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_TPFLAGS_HAVE_VERSION_TAG 0
#endif
#if PY_VERSION_HEX < 0x02060000 && !defined(Py_TPFLAGS_IS_ABSTRACT)
  #define Py_TPFLAGS_IS_ABSTRACT 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#define __Pyx_PyString_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj) || \
                                         PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#ifdef __cplusplus
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__pyNADIA__planarcdi
#define __PYX_HAVE_API__pyNADIA__planarcdi
#include "Double_2D.h"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "Complex_2D.h"
#include "string.h"
#include <string>
#include "TransmissionConstraint.h"
#include "BaseCDI.h"
#include "PlanarCDI.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromUString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return u_end - u - 1;
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    if (strcmp(PyBytes_AsString(default_encoding), "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        const char* default_encoding_c = PyBytes_AS_STRING(default_encoding);
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (ascii_chars_u == NULL) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (ascii_chars_b == NULL || strncmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
    }
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    default_encoding_c = PyBytes_AS_STRING(default_encoding);
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(sys);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "planarcdi.pyx",
  "stringsource",
  "double2d.pxd",
  "complex2d.pxd",
  "transmissionconstraint.pxd",
  "basecdi.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_7pyNADIA_8double2d_PyDouble2D;
struct __pyx_obj_7pyNADIA_9complex2d_PyComplex2D;
struct __pyx_obj_7pyNADIA_22transmissionconstraint_PyComplexConstraint;
struct __pyx_obj_7pyNADIA_22transmissionconstraint_PyTransmissionConstraint;
struct __pyx_obj_7pyNADIA_7basecdi_PyBaseCDI;
struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI;

/* "double2d.pxd":25
 *         T * c_array()
 * IF DOUBLE_PRECISION !='1':
 *         ctypedef Real_2D[float] Double_2D             # <<<<<<<<<<<<<<
 * ELSE:
 *         ctypedef Real_2D[double] Double_2D
 */
typedef Real_2D<float> __pyx_t_7pyNADIA_8double2d_Double_2D;

/* "complex2d.pxd":48
 *         ComplexR_2D get_unpadded(int x_add, int y_add)
 * IF DOUBLE_PRECISION !='1':
 *     ctypedef ComplexR_2D[float] Complex_2D             # <<<<<<<<<<<<<<
 * ELSE:
 *     ctypedef ComplexR_2D[double] Complex_2D
 */
typedef ComplexR_2D<float> __pyx_t_7pyNADIA_9complex2d_Complex_2D;

/* "double2d.pxd":29
 *         ctypedef Real_2D[double] Double_2D
 * 
 * cdef class PyDouble2D:             # <<<<<<<<<<<<<<
 *     cdef Double_2D *thisptr
 *     cdef object __weakref__
 */
struct __pyx_obj_7pyNADIA_8double2d_PyDouble2D {
  PyObject_HEAD
  __pyx_t_7pyNADIA_8double2d_Double_2D *thisptr;
  PyObject *__weakref__;
};


/* "complex2d.pxd":52
 *     ctypedef ComplexR_2D[double] Complex_2D
 * 
 * cdef class PyComplex2D:             # <<<<<<<<<<<<<<
 *     cdef Complex_2D *thisptr
 *     cdef object __weakref__
 */
struct __pyx_obj_7pyNADIA_9complex2d_PyComplex2D {
  PyObject_HEAD
  __pyx_t_7pyNADIA_9complex2d_Complex_2D *thisptr;
  PyObject *__weakref__;
};


/* "transmissionconstraint.pxd":26
 *         void apply_constraint(Complex_2D & transmission)
 * 
 * cdef class PyComplexConstraint:             # <<<<<<<<<<<<<<
 *      cdef ComplexConstraint *thisptr
 * 
 */
struct __pyx_obj_7pyNADIA_22transmissionconstraint_PyComplexConstraint {
  PyObject_HEAD
  ComplexConstraint *thisptr;
};


/* "transmissionconstraint.pxd":29
 *      cdef ComplexConstraint *thisptr
 * 
 * cdef class PyTransmissionConstraint:             # <<<<<<<<<<<<<<
 *      cdef TransmissionConstraint *thisptr
 */
struct __pyx_obj_7pyNADIA_22transmissionconstraint_PyTransmissionConstraint {
  PyObject_HEAD
  TransmissionConstraint *thisptr;
};


/* "basecdi.pxd":44
 *          void reset_best()
 * 
 * cdef class PyBaseCDI:             # <<<<<<<<<<<<<<
 *      cdef BaseCDI * thisptr
 */
struct __pyx_obj_7pyNADIA_7basecdi_PyBaseCDI {
  PyObject_HEAD
  BaseCDI *thisptr;
};


/* "pyNADIA/planarcdi.pxd":21
 *           void set_support(const Double_2D & object_support)
 *           void set_support(const Double_2D & object_support, bool soften)
 * cdef class PyPlanarCDI:             # <<<<<<<<<<<<<<
 *      cdef PlanarCDI *thisptr
 *      cdef int nx,ny
 */
struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI {
  PyObject_HEAD
  PlanarCDI *thisptr;
  int nx;
  int ny;
};

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw); /*proto*/
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) : \
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) : \
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static int __Pyx_Print(PyObject*, PyObject *, int); /*proto*/
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static int __Pyx_PrintOne(PyObject* stream, PyObject *o); /*proto*/

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);  /*proto*/

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'cython' */

/* Module declarations from 'pyNADIA.double2d' */
static PyTypeObject *__pyx_ptype_7pyNADIA_8double2d_PyDouble2D = 0;

/* Module declarations from 'libcpp' */

/* Module declarations from 'pyNADIA.complex2d' */
static PyTypeObject *__pyx_ptype_7pyNADIA_9complex2d_PyComplex2D = 0;

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'pyNADIA.transmissionconstraint' */
static PyTypeObject *__pyx_ptype_7pyNADIA_22transmissionconstraint_PyComplexConstraint = 0;
static PyTypeObject *__pyx_ptype_7pyNADIA_22transmissionconstraint_PyTransmissionConstraint = 0;

/* Module declarations from 'pyNADIA.basecdi' */
static PyTypeObject *__pyx_ptype_7pyNADIA_7basecdi_PyBaseCDI = 0;

/* Module declarations from 'pyNADIA.planarcdi' */
static PyTypeObject *__pyx_ptype_7pyNADIA_9planarcdi_PyPlanarCDI = 0;
static std::string __pyx_convert_string_from_py_(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "pyNADIA.planarcdi"
int __pyx_module_is_main_pyNADIA__planarcdi = 0;

/* Implementation of 'pyNADIA.planarcdi' */
static PyObject *__pyx_builtin_exit;
static int __pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI___cinit__(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, struct __pyx_obj_7pyNADIA_9complex2d_PyComplex2D *__pyx_v_object_estimate, int __pyx_v_n_best); /* proto */
static void __pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_2__dealloc__(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_4getIntensityAutocorrelation(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_6iterate(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_8setRelaxationParameter(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, PyObject *__pyx_v_relax_parameter); /* proto */
static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_10getBestResult(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, PyObject *__pyx_v_error, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_12initialiseEstimate(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, PyObject *__pyx_v_seed); /* proto */
static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_14setSupport(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, struct __pyx_obj_7pyNADIA_8double2d_PyDouble2D *__pyx_v_support, PyObject *__pyx_v_soften); /* proto */
static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_16setIntensity(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, struct __pyx_obj_7pyNADIA_8double2d_PyDouble2D *__pyx_v_intensity); /* proto */
static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_18setBeamStop(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, struct __pyx_obj_7pyNADIA_8double2d_PyDouble2D *__pyx_v_beamstop); /* proto */
static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_20getSizeX(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_22getSizeY(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_24getExitSurfaceWave(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_26setAlgorithm(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, PyObject *__pyx_v_algorithm); /* proto */
static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_28setCustomAlgorithm(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, PyObject *__pyx_v_ms); /* proto */
static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_30printAlgorithm(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_32getError(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_34applyShrinkwrap(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, PyObject *__pyx_v_gauss_width, PyObject *__pyx_v_threshold); /* proto */
static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_36getSupport(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_38applySupport(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, struct __pyx_obj_7pyNADIA_9complex2d_PyComplex2D *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_40projectIntensity(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, struct __pyx_obj_7pyNADIA_9complex2d_PyComplex2D *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_42scaleIntensity(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, struct __pyx_obj_7pyNADIA_9complex2d_PyComplex2D *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_44propagateToDetector(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, struct __pyx_obj_7pyNADIA_9complex2d_PyComplex2D *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_46propagateFromDetector(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, struct __pyx_obj_7pyNADIA_9complex2d_PyComplex2D *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_48setFFTWType(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, PyObject *__pyx_v_type); /* proto */
static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_50setComplexConstraint(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, struct __pyx_obj_7pyNADIA_22transmissionconstraint_PyTransmissionConstraint *__pyx_v_ptc); /* proto */
static PyObject *__pyx_tp_new_7pyNADIA_9planarcdi_PyPlanarCDI(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_end[] = "end";
static char __pyx_k_exit[] = "exit";
static char __pyx_k_file[] = "file";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_seed[] = "seed";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_error[] = "error";
static char __pyx_k_index[] = "index";
static char __pyx_k_print[] = "print";
static char __pyx_k_length[] = "length";
static char __pyx_k_n_best[] = "n_best";
static char __pyx_k_soften[] = "soften";
static char __pyx_k_support[] = "support";
static char __pyx_k_threshold[] = "threshold";
static char __pyx_k_gauss_width[] = "gauss_width";
static char __pyx_k_object_estimate[] = "object_estimate";
static char __pyx_k_argument_must_be_an_array_of_10[] = "argument must be an array of 10 doubles";
static char __pyx_k_package_pyNADIA_planarcdi_Pytho[] = "!@package pyNADIA.planarcdi \nPython interface to the PlanarCDI class.\n\n";
static PyObject *__pyx_kp_s_argument_must_be_an_array_of_10;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_gauss_width;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_length;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_n_best;
static PyObject *__pyx_n_s_object_estimate;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_seed;
static PyObject *__pyx_n_s_soften;
static PyObject *__pyx_n_s_support;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_threshold;
static PyObject *__pyx_float_0_1;
static PyObject *__pyx_float_1_5;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_10;

/* "pyNADIA/planarcdi.pyx":17
 *     Wrapper around the PlanarCDI class and provides Python only access to its methods.
 *     """
 *     def __cinit__(self,PyComplex2D object_estimate, int n_best):             # <<<<<<<<<<<<<<
 *         self.thisptr=new PlanarCDI(deref(object_estimate.thisptr),n_best)
 *         self.nx=object_estimate.thisptr.get_size_x()
 */

/* Python wrapper */
static int __pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyNADIA_9complex2d_PyComplex2D *__pyx_v_object_estimate = 0;
  int __pyx_v_n_best;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_object_estimate,&__pyx_n_s_n_best,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_object_estimate)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_best)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_object_estimate = ((struct __pyx_obj_7pyNADIA_9complex2d_PyComplex2D *)values[0]);
    __pyx_v_n_best = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_n_best == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyNADIA.planarcdi.PyPlanarCDI.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_object_estimate), __pyx_ptype_7pyNADIA_9complex2d_PyComplex2D, 1, "object_estimate", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI___cinit__(((struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *)__pyx_v_self), __pyx_v_object_estimate, __pyx_v_n_best);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI___cinit__(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, struct __pyx_obj_7pyNADIA_9complex2d_PyComplex2D *__pyx_v_object_estimate, int __pyx_v_n_best) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyNADIA/planarcdi.pyx":18
 *     """
 *     def __cinit__(self,PyComplex2D object_estimate, int n_best):
 *         self.thisptr=new PlanarCDI(deref(object_estimate.thisptr),n_best)             # <<<<<<<<<<<<<<
 *         self.nx=object_estimate.thisptr.get_size_x()
 *         self.ny=object_estimate.thisptr.get_size_y()
 */
  __pyx_v_self->thisptr = new PlanarCDI((*__pyx_v_object_estimate->thisptr), __pyx_v_n_best);

  /* "pyNADIA/planarcdi.pyx":19
 *     def __cinit__(self,PyComplex2D object_estimate, int n_best):
 *         self.thisptr=new PlanarCDI(deref(object_estimate.thisptr),n_best)
 *         self.nx=object_estimate.thisptr.get_size_x()             # <<<<<<<<<<<<<<
 *         self.ny=object_estimate.thisptr.get_size_y()
 * 
 */
  __pyx_v_self->nx = __pyx_v_object_estimate->thisptr->get_size_x();

  /* "pyNADIA/planarcdi.pyx":20
 *         self.thisptr=new PlanarCDI(deref(object_estimate.thisptr),n_best)
 *         self.nx=object_estimate.thisptr.get_size_x()
 *         self.ny=object_estimate.thisptr.get_size_y()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->ny = __pyx_v_object_estimate->thisptr->get_size_y();

  /* "pyNADIA/planarcdi.pyx":17
 *     Wrapper around the PlanarCDI class and provides Python only access to its methods.
 *     """
 *     def __cinit__(self,PyComplex2D object_estimate, int n_best):             # <<<<<<<<<<<<<<
 *         self.thisptr=new PlanarCDI(deref(object_estimate.thisptr),n_best)
 *         self.nx=object_estimate.thisptr.get_size_x()
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyNADIA/planarcdi.pyx":22
 *         self.ny=object_estimate.thisptr.get_size_y()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *     def getIntensityAutocorrelation(self):
 */

/* Python wrapper */
static void __pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_2__dealloc__(((struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_2__dealloc__(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pyNADIA/planarcdi.pyx":23
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 *     def getIntensityAutocorrelation(self):
 *         """!Returns the autocorrelation of the data in a PyDouble2D object.
 */
  delete __pyx_v_self->thisptr;

  /* "pyNADIA/planarcdi.pyx":22
 *         self.ny=object_estimate.thisptr.get_size_y()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *     def getIntensityAutocorrelation(self):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pyNADIA/planarcdi.pyx":24
 *     def __dealloc__(self):
 *         del self.thisptr
 *     def getIntensityAutocorrelation(self):             # <<<<<<<<<<<<<<
 *         """!Returns the autocorrelation of the data in a PyDouble2D object.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_5getIntensityAutocorrelation(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_4getIntensityAutocorrelation[] = "!Returns the autocorrelation of the data in a PyDouble2D object.\n           \n        @return The autocorrelation as a PyDouble2D  \n           \n        ";
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_5getIntensityAutocorrelation(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getIntensityAutocorrelation (wrapper)", 0);
  __pyx_r = __pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_4getIntensityAutocorrelation(((struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_4getIntensityAutocorrelation(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self) {
  struct __pyx_obj_7pyNADIA_8double2d_PyDouble2D *__pyx_v_autoc = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getIntensityAutocorrelation", 0);

  /* "pyNADIA/planarcdi.pyx":30
 * 
 *         """
 *         autoc = PyDouble2D(self.nx,self.ny)             # <<<<<<<<<<<<<<
 *         self.thisptr.get_intensity_autocorrelation(deref(autoc.thisptr))
 *         return autoc
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->nx); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->ny); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7pyNADIA_8double2d_PyDouble2D)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_autoc = ((struct __pyx_obj_7pyNADIA_8double2d_PyDouble2D *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyNADIA/planarcdi.pyx":31
 *         """
 *         autoc = PyDouble2D(self.nx,self.ny)
 *         self.thisptr.get_intensity_autocorrelation(deref(autoc.thisptr))             # <<<<<<<<<<<<<<
 *         return autoc
 * 
 */
  __pyx_v_self->thisptr->get_intensity_autocorrelation((*__pyx_v_autoc->thisptr));

  /* "pyNADIA/planarcdi.pyx":32
 *         autoc = PyDouble2D(self.nx,self.ny)
 *         self.thisptr.get_intensity_autocorrelation(deref(autoc.thisptr))
 *         return autoc             # <<<<<<<<<<<<<<
 * 
 *     # all these are inherited from the baseCDI class
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_autoc));
  __pyx_r = ((PyObject *)__pyx_v_autoc);
  goto __pyx_L0;

  /* "pyNADIA/planarcdi.pyx":24
 *     def __dealloc__(self):
 *         del self.thisptr
 *     def getIntensityAutocorrelation(self):             # <<<<<<<<<<<<<<
 *         """!Returns the autocorrelation of the data in a PyDouble2D object.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyNADIA.planarcdi.PyPlanarCDI.getIntensityAutocorrelation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_autoc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyNADIA/planarcdi.pyx":35
 * 
 *     # all these are inherited from the baseCDI class
 *     def iterate(self):             # <<<<<<<<<<<<<<
 *         """!Performs one iteration of propagating the image to and from the detector plane.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_7iterate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_6iterate[] = "!Performs one iteration of propagating the image to and from the detector plane.\n        \n        Performs one iteration of propagating the image to and from the detector plane.\n           \n        ";
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_7iterate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iterate (wrapper)", 0);
  __pyx_r = __pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_6iterate(((struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_6iterate(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iterate", 0);

  /* "pyNADIA/planarcdi.pyx":41
 * 
 *         """
 *         self.thisptr.iterate()             # <<<<<<<<<<<<<<
 * 
 *     def setRelaxationParameter(self, relax_parameter):
 */
  __pyx_v_self->thisptr->iterate();

  /* "pyNADIA/planarcdi.pyx":35
 * 
 *     # all these are inherited from the baseCDI class
 *     def iterate(self):             # <<<<<<<<<<<<<<
 *         """!Performs one iteration of propagating the image to and from the detector plane.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyNADIA/planarcdi.pyx":43
 *         self.thisptr.iterate()
 * 
 *     def setRelaxationParameter(self, relax_parameter):             # <<<<<<<<<<<<<<
 *         """!Sets the relaxation parameter.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_9setRelaxationParameter(PyObject *__pyx_v_self, PyObject *__pyx_v_relax_parameter); /*proto*/
static char __pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_8setRelaxationParameter[] = "!Sets the relaxation parameter.\n        \n        @param relax_parameter The relaxation parameter\n             \n        ";
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_9setRelaxationParameter(PyObject *__pyx_v_self, PyObject *__pyx_v_relax_parameter) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setRelaxationParameter (wrapper)", 0);
  __pyx_r = __pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_8setRelaxationParameter(((struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *)__pyx_v_self), ((PyObject *)__pyx_v_relax_parameter));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_8setRelaxationParameter(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, PyObject *__pyx_v_relax_parameter) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setRelaxationParameter", 0);

  /* "pyNADIA/planarcdi.pyx":49
 * 
 *         """
 *         self.thisptr.set_relaxation_parameter(relax_parameter)             # <<<<<<<<<<<<<<
 * 
 *     def getBestResult(self, error, index=0):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_relax_parameter); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->thisptr->set_relaxation_parameter(__pyx_t_1);

  /* "pyNADIA/planarcdi.pyx":43
 *         self.thisptr.iterate()
 * 
 *     def setRelaxationParameter(self, relax_parameter):             # <<<<<<<<<<<<<<
 *         """!Sets the relaxation parameter.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyNADIA.planarcdi.PyPlanarCDI.setRelaxationParameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyNADIA/planarcdi.pyx":51
 *         self.thisptr.set_relaxation_parameter(relax_parameter)
 * 
 *     def getBestResult(self, error, index=0):             # <<<<<<<<<<<<<<
 *         """!Returns a PyComplex2D holding the current best result.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_11getBestResult(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_10getBestResult[] = "!Returns a PyComplex2D holding the current best result.\n        \n        @param error \n        @param index Index of the best result\n           \n        @return  A PyComplex2D containing the current best result.\n        ";
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_11getBestResult(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_error = 0;
  PyObject *__pyx_v_index = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getBestResult (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_error,&__pyx_n_s_index,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_error)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getBestResult") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_error = values[0];
    __pyx_v_index = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getBestResult", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyNADIA.planarcdi.PyPlanarCDI.getBestResult", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_10getBestResult(((struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *)__pyx_v_self), __pyx_v_error, __pyx_v_index);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_10getBestResult(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, PyObject *__pyx_v_error, PyObject *__pyx_v_index) {
  struct __pyx_obj_7pyNADIA_9complex2d_PyComplex2D *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getBestResult", 0);

  /* "pyNADIA/planarcdi.pyx":59
 *         @return  A PyComplex2D containing the current best result.
 *         """
 *         result = PyComplex2D(self.nx,self.ny)             # <<<<<<<<<<<<<<
 *         result.thisptr=self.thisptr.get_best_result(error,index)
 *         return result
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->nx); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->ny); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7pyNADIA_9complex2d_PyComplex2D)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_obj_7pyNADIA_9complex2d_PyComplex2D *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyNADIA/planarcdi.pyx":60
 *         """
 *         result = PyComplex2D(self.nx,self.ny)
 *         result.thisptr=self.thisptr.get_best_result(error,index)             # <<<<<<<<<<<<<<
 *         return result
 *     def initialiseEstimate(self, seed=0):
 */
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_error); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_index); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_result->thisptr = __pyx_v_self->thisptr->get_best_result(__pyx_t_4, __pyx_t_5);

  /* "pyNADIA/planarcdi.pyx":61
 *         result = PyComplex2D(self.nx,self.ny)
 *         result.thisptr=self.thisptr.get_best_result(error,index)
 *         return result             # <<<<<<<<<<<<<<
 *     def initialiseEstimate(self, seed=0):
 *         """! Initialises the reconstructed image, with an optional random seed.
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pyNADIA/planarcdi.pyx":51
 *         self.thisptr.set_relaxation_parameter(relax_parameter)
 * 
 *     def getBestResult(self, error, index=0):             # <<<<<<<<<<<<<<
 *         """!Returns a PyComplex2D holding the current best result.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyNADIA.planarcdi.PyPlanarCDI.getBestResult", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyNADIA/planarcdi.pyx":62
 *         result.thisptr=self.thisptr.get_best_result(error,index)
 *         return result
 *     def initialiseEstimate(self, seed=0):             # <<<<<<<<<<<<<<
 *         """! Initialises the reconstructed image, with an optional random seed.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_13initialiseEstimate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_12initialiseEstimate[] = "! Initialises the reconstructed image, with an optional random seed.\n            \n        Initialises the reconstructed image, with an optional random seed.\n         \n        @param seed \n        ";
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_13initialiseEstimate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_seed = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialiseEstimate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_seed,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_seed);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialiseEstimate") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_seed = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialiseEstimate", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyNADIA.planarcdi.PyPlanarCDI.initialiseEstimate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_12initialiseEstimate(((struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *)__pyx_v_self), __pyx_v_seed);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_12initialiseEstimate(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, PyObject *__pyx_v_seed) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("initialiseEstimate", 0);

  /* "pyNADIA/planarcdi.pyx":69
 *         @param seed
 *         """
 *         self.thisptr.initialise_estimate(seed)             # <<<<<<<<<<<<<<
 *     def setSupport(self, PyDouble2D support, soften=False):
 *         """!Set the support.
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_seed); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->thisptr->initialise_estimate(__pyx_t_1);

  /* "pyNADIA/planarcdi.pyx":62
 *         result.thisptr=self.thisptr.get_best_result(error,index)
 *         return result
 *     def initialiseEstimate(self, seed=0):             # <<<<<<<<<<<<<<
 *         """! Initialises the reconstructed image, with an optional random seed.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyNADIA.planarcdi.PyPlanarCDI.initialiseEstimate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyNADIA/planarcdi.pyx":70
 *         """
 *         self.thisptr.initialise_estimate(seed)
 *     def setSupport(self, PyDouble2D support, soften=False):             # <<<<<<<<<<<<<<
 *         """!Set the support.
 *         @param support A PyDouble2D object containing the support.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_15setSupport(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_14setSupport[] = "!Set the support.\n        @param support A PyDouble2D object containing the support.\n        ";
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_15setSupport(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyNADIA_8double2d_PyDouble2D *__pyx_v_support = 0;
  PyObject *__pyx_v_soften = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setSupport (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_support,&__pyx_n_s_soften,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_support)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_soften);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setSupport") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_support = ((struct __pyx_obj_7pyNADIA_8double2d_PyDouble2D *)values[0]);
    __pyx_v_soften = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setSupport", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyNADIA.planarcdi.PyPlanarCDI.setSupport", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_support), __pyx_ptype_7pyNADIA_8double2d_PyDouble2D, 1, "support", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_14setSupport(((struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *)__pyx_v_self), __pyx_v_support, __pyx_v_soften);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_14setSupport(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, struct __pyx_obj_7pyNADIA_8double2d_PyDouble2D *__pyx_v_support, PyObject *__pyx_v_soften) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setSupport", 0);

  /* "pyNADIA/planarcdi.pyx":74
 *         @param support A PyDouble2D object containing the support.
 *         """
 *         self.thisptr.set_support(deref(support.thisptr),soften)             # <<<<<<<<<<<<<<
 *     def setIntensity(self,PyDouble2D intensity):
 *         """!Set the intensity
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_soften); if (unlikely((__pyx_t_1 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->thisptr->set_support((*__pyx_v_support->thisptr), __pyx_t_1);

  /* "pyNADIA/planarcdi.pyx":70
 *         """
 *         self.thisptr.initialise_estimate(seed)
 *     def setSupport(self, PyDouble2D support, soften=False):             # <<<<<<<<<<<<<<
 *         """!Set the support.
 *         @param support A PyDouble2D object containing the support.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyNADIA.planarcdi.PyPlanarCDI.setSupport", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyNADIA/planarcdi.pyx":75
 *         """
 *         self.thisptr.set_support(deref(support.thisptr),soften)
 *     def setIntensity(self,PyDouble2D intensity):             # <<<<<<<<<<<<<<
 *         """!Set the intensity
 *         @param intensity A PyDouble2D containing the intensity
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_17setIntensity(PyObject *__pyx_v_self, PyObject *__pyx_v_intensity); /*proto*/
static char __pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_16setIntensity[] = "!Set the intensity\n        @param intensity A PyDouble2D containing the intensity \n        ";
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_17setIntensity(PyObject *__pyx_v_self, PyObject *__pyx_v_intensity) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setIntensity (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_intensity), __pyx_ptype_7pyNADIA_8double2d_PyDouble2D, 1, "intensity", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_16setIntensity(((struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *)__pyx_v_self), ((struct __pyx_obj_7pyNADIA_8double2d_PyDouble2D *)__pyx_v_intensity));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_16setIntensity(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, struct __pyx_obj_7pyNADIA_8double2d_PyDouble2D *__pyx_v_intensity) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setIntensity", 0);

  /* "pyNADIA/planarcdi.pyx":79
 *         @param intensity A PyDouble2D containing the intensity
 *         """
 *         self.thisptr.set_intensity(deref(intensity.thisptr))             # <<<<<<<<<<<<<<
 *     def setBeamStop(self,PyDouble2D beamstop):
 *         """! Set the beam stop
 */
  __pyx_v_self->thisptr->set_intensity((*__pyx_v_intensity->thisptr));

  /* "pyNADIA/planarcdi.pyx":75
 *         """
 *         self.thisptr.set_support(deref(support.thisptr),soften)
 *     def setIntensity(self,PyDouble2D intensity):             # <<<<<<<<<<<<<<
 *         """!Set the intensity
 *         @param intensity A PyDouble2D containing the intensity
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyNADIA/planarcdi.pyx":80
 *         """
 *         self.thisptr.set_intensity(deref(intensity.thisptr))
 *     def setBeamStop(self,PyDouble2D beamstop):             # <<<<<<<<<<<<<<
 *         """! Set the beam stop
 *         @param beamstop A PyDouble2D representing the beamstop data.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_19setBeamStop(PyObject *__pyx_v_self, PyObject *__pyx_v_beamstop); /*proto*/
static char __pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_18setBeamStop[] = "! Set the beam stop\n        @param beamstop A PyDouble2D representing the beamstop data.\n        ";
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_19setBeamStop(PyObject *__pyx_v_self, PyObject *__pyx_v_beamstop) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setBeamStop (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_beamstop), __pyx_ptype_7pyNADIA_8double2d_PyDouble2D, 1, "beamstop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_18setBeamStop(((struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *)__pyx_v_self), ((struct __pyx_obj_7pyNADIA_8double2d_PyDouble2D *)__pyx_v_beamstop));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_18setBeamStop(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, struct __pyx_obj_7pyNADIA_8double2d_PyDouble2D *__pyx_v_beamstop) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setBeamStop", 0);

  /* "pyNADIA/planarcdi.pyx":84
 *         @param beamstop A PyDouble2D representing the beamstop data.
 *         """
 *         self.thisptr.set_beam_stop(deref(beamstop.thisptr))             # <<<<<<<<<<<<<<
 *     def getSizeX(self):
 *         """!Get the number of pixels in the x co ordinate.
 */
  __pyx_v_self->thisptr->set_beam_stop((*__pyx_v_beamstop->thisptr));

  /* "pyNADIA/planarcdi.pyx":80
 *         """
 *         self.thisptr.set_intensity(deref(intensity.thisptr))
 *     def setBeamStop(self,PyDouble2D beamstop):             # <<<<<<<<<<<<<<
 *         """! Set the beam stop
 *         @param beamstop A PyDouble2D representing the beamstop data.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyNADIA/planarcdi.pyx":85
 *         """
 *         self.thisptr.set_beam_stop(deref(beamstop.thisptr))
 *     def getSizeX(self):             # <<<<<<<<<<<<<<
 *         """!Get the number of pixels in the x co ordinate.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_21getSizeX(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_20getSizeX[] = "!Get the number of pixels in the x co ordinate.\n        \n        @return An int, the number of pixels in the x coordinate.\n        ";
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_21getSizeX(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSizeX (wrapper)", 0);
  __pyx_r = __pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_20getSizeX(((struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_20getSizeX(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSizeX", 0);

  /* "pyNADIA/planarcdi.pyx":90
 *         @return An int, the number of pixels in the x coordinate.
 *         """
 *         return self.nx             # <<<<<<<<<<<<<<
 *     def getSizeY(self):
 *         """!Get the number of pixels in the y co ordinate.
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->nx); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyNADIA/planarcdi.pyx":85
 *         """
 *         self.thisptr.set_beam_stop(deref(beamstop.thisptr))
 *     def getSizeX(self):             # <<<<<<<<<<<<<<
 *         """!Get the number of pixels in the x co ordinate.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyNADIA.planarcdi.PyPlanarCDI.getSizeX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyNADIA/planarcdi.pyx":91
 *         """
 *         return self.nx
 *     def getSizeY(self):             # <<<<<<<<<<<<<<
 *         """!Get the number of pixels in the y co ordinate.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_23getSizeY(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_22getSizeY[] = "!Get the number of pixels in the y co ordinate.\n        \n        @return An int, the number of pixels in the y coordinate.\n        ";
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_23getSizeY(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSizeY (wrapper)", 0);
  __pyx_r = __pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_22getSizeY(((struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_22getSizeY(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSizeY", 0);

  /* "pyNADIA/planarcdi.pyx":96
 *         @return An int, the number of pixels in the y coordinate.
 *         """
 *         return self.ny             # <<<<<<<<<<<<<<
 *     def getExitSurfaceWave(self):
 *         """!Get the exit surface wave
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->ny); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyNADIA/planarcdi.pyx":91
 *         """
 *         return self.nx
 *     def getSizeY(self):             # <<<<<<<<<<<<<<
 *         """!Get the number of pixels in the y co ordinate.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyNADIA.planarcdi.PyPlanarCDI.getSizeY", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyNADIA/planarcdi.pyx":97
 *         """
 *         return self.ny
 *     def getExitSurfaceWave(self):             # <<<<<<<<<<<<<<
 *         """!Get the exit surface wave
 *         @returns The exit surface wave (PyComplex2D)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_25getExitSurfaceWave(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_24getExitSurfaceWave[] = "!Get the exit surface wave\n        @returns The exit surface wave (PyComplex2D)\n        ";
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_25getExitSurfaceWave(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getExitSurfaceWave (wrapper)", 0);
  __pyx_r = __pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_24getExitSurfaceWave(((struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_24getExitSurfaceWave(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self) {
  struct __pyx_obj_7pyNADIA_9complex2d_PyComplex2D *__pyx_v_esw = NULL;
  __pyx_t_7pyNADIA_9complex2d_Complex_2D *__pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getExitSurfaceWave", 0);

  /* "pyNADIA/planarcdi.pyx":101
 *         @returns The exit surface wave (PyComplex2D)
 *         """
 *         esw = PyComplex2D(self.nx,self.ny)             # <<<<<<<<<<<<<<
 *         cdef Complex_2D * tmp = new Complex_2D(self.thisptr.get_exit_surface_wave())
 *         esw.thisptr=tmp
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->nx); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->ny); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7pyNADIA_9complex2d_PyComplex2D)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_esw = ((struct __pyx_obj_7pyNADIA_9complex2d_PyComplex2D *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyNADIA/planarcdi.pyx":102
 *         """
 *         esw = PyComplex2D(self.nx,self.ny)
 *         cdef Complex_2D * tmp = new Complex_2D(self.thisptr.get_exit_surface_wave())             # <<<<<<<<<<<<<<
 *         esw.thisptr=tmp
 *         return esw
 */
  __pyx_v_tmp = new __pyx_t_7pyNADIA_9complex2d_Complex_2D(__pyx_v_self->thisptr->get_exit_surface_wave());

  /* "pyNADIA/planarcdi.pyx":103
 *         esw = PyComplex2D(self.nx,self.ny)
 *         cdef Complex_2D * tmp = new Complex_2D(self.thisptr.get_exit_surface_wave())
 *         esw.thisptr=tmp             # <<<<<<<<<<<<<<
 *         return esw
 *     def setAlgorithm(self, algorithm):
 */
  __pyx_v_esw->thisptr = __pyx_v_tmp;

  /* "pyNADIA/planarcdi.pyx":104
 *         cdef Complex_2D * tmp = new Complex_2D(self.thisptr.get_exit_surface_wave())
 *         esw.thisptr=tmp
 *         return esw             # <<<<<<<<<<<<<<
 *     def setAlgorithm(self, algorithm):
 *         """!Set the algorithm to use
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_esw));
  __pyx_r = ((PyObject *)__pyx_v_esw);
  goto __pyx_L0;

  /* "pyNADIA/planarcdi.pyx":97
 *         """
 *         return self.ny
 *     def getExitSurfaceWave(self):             # <<<<<<<<<<<<<<
 *         """!Get the exit surface wave
 *         @returns The exit surface wave (PyComplex2D)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyNADIA.planarcdi.PyPlanarCDI.getExitSurfaceWave", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_esw);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyNADIA/planarcdi.pyx":105
 *         esw.thisptr=tmp
 *         return esw
 *     def setAlgorithm(self, algorithm):             # <<<<<<<<<<<<<<
 *         """!Set the algorithm to use
 *          @param algorithm A string
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_27setAlgorithm(PyObject *__pyx_v_self, PyObject *__pyx_v_algorithm); /*proto*/
static char __pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_26setAlgorithm[] = "!Set the algorithm to use\n         @param algorithm A string\n        ";
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_27setAlgorithm(PyObject *__pyx_v_self, PyObject *__pyx_v_algorithm) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAlgorithm (wrapper)", 0);
  __pyx_r = __pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_26setAlgorithm(((struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *)__pyx_v_self), ((PyObject *)__pyx_v_algorithm));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_26setAlgorithm(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, PyObject *__pyx_v_algorithm) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setAlgorithm", 0);

  /* "pyNADIA/planarcdi.pyx":109
 *          @param algorithm A string
 *         """
 *         self.thisptr.set_algorithm(self.thisptr.getAlgFromName(algorithm))             # <<<<<<<<<<<<<<
 *     def setCustomAlgorithm(self, ms):
 *         """! Set a custom algorithm
 */
  __pyx_t_1 = __pyx_convert_string_from_py_(__pyx_v_algorithm); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->thisptr->set_algorithm(__pyx_v_self->thisptr->getAlgFromName(__pyx_t_1));

  /* "pyNADIA/planarcdi.pyx":105
 *         esw.thisptr=tmp
 *         return esw
 *     def setAlgorithm(self, algorithm):             # <<<<<<<<<<<<<<
 *         """!Set the algorithm to use
 *          @param algorithm A string
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyNADIA.planarcdi.PyPlanarCDI.setAlgorithm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyNADIA/planarcdi.pyx":110
 *         """
 *         self.thisptr.set_algorithm(self.thisptr.getAlgFromName(algorithm))
 *     def setCustomAlgorithm(self, ms):             # <<<<<<<<<<<<<<
 *         """! Set a custom algorithm
 *         @param ms A list of 10 doubles to specify a custom algorithm. See
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_29setCustomAlgorithm(PyObject *__pyx_v_self, PyObject *__pyx_v_ms); /*proto*/
static char __pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_28setCustomAlgorithm[] = "! Set a custom algorithm\n        @param ms A list of 10 doubles to specify a custom algorithm. See\n        set_custom_algorithm() documentation for details\n        ";
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_29setCustomAlgorithm(PyObject *__pyx_v_self, PyObject *__pyx_v_ms) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setCustomAlgorithm (wrapper)", 0);
  __pyx_r = __pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_28setCustomAlgorithm(((struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *)__pyx_v_self), ((PyObject *)__pyx_v_ms));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_28setCustomAlgorithm(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, PyObject *__pyx_v_ms) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  double __pyx_t_4;
  double __pyx_t_5;
  double __pyx_t_6;
  double __pyx_t_7;
  double __pyx_t_8;
  double __pyx_t_9;
  double __pyx_t_10;
  double __pyx_t_11;
  double __pyx_t_12;
  double __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setCustomAlgorithm", 0);

  /* "pyNADIA/planarcdi.pyx":115
 *         set_custom_algorithm() documentation for details
 *         """
 *         if ms.length()!=10:             # <<<<<<<<<<<<<<
 *             print "argument must be an array of 10 doubles"
 *             exit
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ms, __pyx_n_s_length); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_int_10, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "pyNADIA/planarcdi.pyx":116
 *         """
 *         if ms.length()!=10:
 *             print "argument must be an array of 10 doubles"             # <<<<<<<<<<<<<<
 *             exit
 *         self.thisptr.set_custom_algorithm(ms[0],ms[1],ms[2],ms[3],ms[4], ms[5],ms[6],ms[7],ms[8],ms[9])
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_argument_must_be_an_array_of_10) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pyNADIA/planarcdi.pyx":117
 *         if ms.length()!=10:
 *             print "argument must be an array of 10 doubles"
 *             exit             # <<<<<<<<<<<<<<
 *         self.thisptr.set_custom_algorithm(ms[0],ms[1],ms[2],ms[3],ms[4], ms[5],ms[6],ms[7],ms[8],ms[9])
 *     def printAlgorithm(self):
 */
    __pyx_builtin_exit;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pyNADIA/planarcdi.pyx":118
 *             print "argument must be an array of 10 doubles"
 *             exit
 *         self.thisptr.set_custom_algorithm(ms[0],ms[1],ms[2],ms[3],ms[4], ms[5],ms[6],ms[7],ms[8],ms[9])             # <<<<<<<<<<<<<<
 *     def printAlgorithm(self):
 *         """!Print the algorith used
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_ms, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_ms, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_ms, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_ms, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_ms, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_ms, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_ms, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_ms, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_ms, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_ms, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->set_custom_algorithm(__pyx_t_4, __pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13);

  /* "pyNADIA/planarcdi.pyx":110
 *         """
 *         self.thisptr.set_algorithm(self.thisptr.getAlgFromName(algorithm))
 *     def setCustomAlgorithm(self, ms):             # <<<<<<<<<<<<<<
 *         """! Set a custom algorithm
 *         @param ms A list of 10 doubles to specify a custom algorithm. See
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyNADIA.planarcdi.PyPlanarCDI.setCustomAlgorithm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyNADIA/planarcdi.pyx":119
 *             exit
 *         self.thisptr.set_custom_algorithm(ms[0],ms[1],ms[2],ms[3],ms[4], ms[5],ms[6],ms[7],ms[8],ms[9])
 *     def printAlgorithm(self):             # <<<<<<<<<<<<<<
 *         """!Print the algorith used
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_31printAlgorithm(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_30printAlgorithm[] = "!Print the algorith used\n        ";
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_31printAlgorithm(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printAlgorithm (wrapper)", 0);
  __pyx_r = __pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_30printAlgorithm(((struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_30printAlgorithm(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printAlgorithm", 0);

  /* "pyNADIA/planarcdi.pyx":122
 *         """!Print the algorith used
 *         """
 *         self.thisptr.print_algorithm()             # <<<<<<<<<<<<<<
 *     def getError(self):
 *         """!Returns the current error
 */
  __pyx_v_self->thisptr->print_algorithm();

  /* "pyNADIA/planarcdi.pyx":119
 *             exit
 *         self.thisptr.set_custom_algorithm(ms[0],ms[1],ms[2],ms[3],ms[4], ms[5],ms[6],ms[7],ms[8],ms[9])
 *     def printAlgorithm(self):             # <<<<<<<<<<<<<<
 *         """!Print the algorith used
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyNADIA/planarcdi.pyx":123
 *         """
 *         self.thisptr.print_algorithm()
 *     def getError(self):             # <<<<<<<<<<<<<<
 *         """!Returns the current error
 *         @return The current value of the error metric (double).
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_33getError(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_32getError[] = "!Returns the current error \n        @return The current value of the error metric (double).\n        ";
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_33getError(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getError (wrapper)", 0);
  __pyx_r = __pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_32getError(((struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_32getError(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getError", 0);

  /* "pyNADIA/planarcdi.pyx":127
 *         @return The current value of the error metric (double).
 *         """
 *         return self.thisptr.get_error()             # <<<<<<<<<<<<<<
 *     def applyShrinkwrap(self,gauss_width=1.5,threshold=0.1):
 *         """! Apply shrinkwrap algorithm.
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->get_error()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyNADIA/planarcdi.pyx":123
 *         """
 *         self.thisptr.print_algorithm()
 *     def getError(self):             # <<<<<<<<<<<<<<
 *         """!Returns the current error
 *         @return The current value of the error metric (double).
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyNADIA.planarcdi.PyPlanarCDI.getError", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyNADIA/planarcdi.pyx":128
 *         """
 *         return self.thisptr.get_error()
 *     def applyShrinkwrap(self,gauss_width=1.5,threshold=0.1):             # <<<<<<<<<<<<<<
 *         """! Apply shrinkwrap algorithm.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_35applyShrinkwrap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_34applyShrinkwrap[] = "! Apply shrinkwrap algorithm.\n        \n        @param gauss_width (default=1.5)\n        @param threshold (default=0.1)\n        \n        ";
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_35applyShrinkwrap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_gauss_width = 0;
  PyObject *__pyx_v_threshold = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("applyShrinkwrap (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_gauss_width,&__pyx_n_s_threshold,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_float_1_5);
    values[1] = ((PyObject *)__pyx_float_0_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gauss_width);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threshold);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "applyShrinkwrap") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_gauss_width = values[0];
    __pyx_v_threshold = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("applyShrinkwrap", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyNADIA.planarcdi.PyPlanarCDI.applyShrinkwrap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_34applyShrinkwrap(((struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *)__pyx_v_self), __pyx_v_gauss_width, __pyx_v_threshold);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_34applyShrinkwrap(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, PyObject *__pyx_v_gauss_width, PyObject *__pyx_v_threshold) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("applyShrinkwrap", 0);

  /* "pyNADIA/planarcdi.pyx":135
 * 
 *         """
 *         self.thisptr.apply_shrinkwrap(gauss_width,threshold)             # <<<<<<<<<<<<<<
 *     def getSupport(self):
 *         """! Get the current support.
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_gauss_width); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_threshold); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->thisptr->apply_shrinkwrap(__pyx_t_1, __pyx_t_2);

  /* "pyNADIA/planarcdi.pyx":128
 *         """
 *         return self.thisptr.get_error()
 *     def applyShrinkwrap(self,gauss_width=1.5,threshold=0.1):             # <<<<<<<<<<<<<<
 *         """! Apply shrinkwrap algorithm.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyNADIA.planarcdi.PyPlanarCDI.applyShrinkwrap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyNADIA/planarcdi.pyx":136
 *         """
 *         self.thisptr.apply_shrinkwrap(gauss_width,threshold)
 *     def getSupport(self):             # <<<<<<<<<<<<<<
 *         """! Get the current support.
 *         @return a PyDouble2D containing the support
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_37getSupport(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_36getSupport[] = "! Get the current support.\n        @return a PyDouble2D containing the support\n        ";
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_37getSupport(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSupport (wrapper)", 0);
  __pyx_r = __pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_36getSupport(((struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_36getSupport(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self) {
  struct __pyx_obj_7pyNADIA_8double2d_PyDouble2D *__pyx_v_support = NULL;
  __pyx_t_7pyNADIA_8double2d_Double_2D *__pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __pyx_t_7pyNADIA_8double2d_Double_2D *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSupport", 0);

  /* "pyNADIA/planarcdi.pyx":140
 *         @return a PyDouble2D containing the support
 *         """
 *         support = PyDouble2D()             # <<<<<<<<<<<<<<
 *         cdef Double_2D * tmp = new Double_2D(self.thisptr.get_support())
 *         support.thisptr=tmp
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7pyNADIA_8double2d_PyDouble2D)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_support = ((struct __pyx_obj_7pyNADIA_8double2d_PyDouble2D *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyNADIA/planarcdi.pyx":141
 *         """
 *         support = PyDouble2D()
 *         cdef Double_2D * tmp = new Double_2D(self.thisptr.get_support())             # <<<<<<<<<<<<<<
 *         support.thisptr=tmp
 *         return support
 */
  try {
    __pyx_t_2 = new __pyx_t_7pyNADIA_8double2d_Double_2D(__pyx_v_self->thisptr->get_support());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_tmp = __pyx_t_2;

  /* "pyNADIA/planarcdi.pyx":142
 *         support = PyDouble2D()
 *         cdef Double_2D * tmp = new Double_2D(self.thisptr.get_support())
 *         support.thisptr=tmp             # <<<<<<<<<<<<<<
 *         return support
 *     def applySupport(self,PyComplex2D c):
 */
  __pyx_v_support->thisptr = __pyx_v_tmp;

  /* "pyNADIA/planarcdi.pyx":143
 *         cdef Double_2D * tmp = new Double_2D(self.thisptr.get_support())
 *         support.thisptr=tmp
 *         return support             # <<<<<<<<<<<<<<
 *     def applySupport(self,PyComplex2D c):
 *         """!Apply the support constraint)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_support));
  __pyx_r = ((PyObject *)__pyx_v_support);
  goto __pyx_L0;

  /* "pyNADIA/planarcdi.pyx":136
 *         """
 *         self.thisptr.apply_shrinkwrap(gauss_width,threshold)
 *     def getSupport(self):             # <<<<<<<<<<<<<<
 *         """! Get the current support.
 *         @return a PyDouble2D containing the support
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyNADIA.planarcdi.PyPlanarCDI.getSupport", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_support);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyNADIA/planarcdi.pyx":144
 *         support.thisptr=tmp
 *         return support
 *     def applySupport(self,PyComplex2D c):             # <<<<<<<<<<<<<<
 *         """!Apply the support constraint)
 *         @param c A PyComplex2D to apply the support constraint to.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_39applySupport(PyObject *__pyx_v_self, PyObject *__pyx_v_c); /*proto*/
static char __pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_38applySupport[] = "!Apply the support constraint)\n        @param c A PyComplex2D to apply the support constraint to.\n        @return The complex field with support constraint applied (PyComplex2D)\n        ";
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_39applySupport(PyObject *__pyx_v_self, PyObject *__pyx_v_c) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("applySupport (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), __pyx_ptype_7pyNADIA_9complex2d_PyComplex2D, 1, "c", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_38applySupport(((struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *)__pyx_v_self), ((struct __pyx_obj_7pyNADIA_9complex2d_PyComplex2D *)__pyx_v_c));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_38applySupport(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, struct __pyx_obj_7pyNADIA_9complex2d_PyComplex2D *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("applySupport", 0);

  /* "pyNADIA/planarcdi.pyx":149
 *         @return The complex field with support constraint applied (PyComplex2D)
 *         """
 *         self.thisptr.apply_support(deref(c.thisptr))             # <<<<<<<<<<<<<<
 *         return c
 *     def projectIntensity(self, PyComplex2D c):
 */
  __pyx_v_self->thisptr->apply_support((*__pyx_v_c->thisptr));

  /* "pyNADIA/planarcdi.pyx":150
 *         """
 *         self.thisptr.apply_support(deref(c.thisptr))
 *         return c             # <<<<<<<<<<<<<<
 *     def projectIntensity(self, PyComplex2D c):
 *         """!Apply the intensity constraint
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_c));
  __pyx_r = ((PyObject *)__pyx_v_c);
  goto __pyx_L0;

  /* "pyNADIA/planarcdi.pyx":144
 *         support.thisptr=tmp
 *         return support
 *     def applySupport(self,PyComplex2D c):             # <<<<<<<<<<<<<<
 *         """!Apply the support constraint)
 *         @param c A PyComplex2D to apply the support constraint to.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyNADIA/planarcdi.pyx":151
 *         self.thisptr.apply_support(deref(c.thisptr))
 *         return c
 *     def projectIntensity(self, PyComplex2D c):             # <<<<<<<<<<<<<<
 *         """!Apply the intensity constraint
 *         @param c A PyComplex2D to apply to the intensity constraint on
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_41projectIntensity(PyObject *__pyx_v_self, PyObject *__pyx_v_c); /*proto*/
static char __pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_40projectIntensity[] = "!Apply the intensity constraint\n        @param c A PyComplex2D to apply to the intensity constraint on\n        @return A complex field with intensity constraint applied. (PyComplex2D) \n        ";
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_41projectIntensity(PyObject *__pyx_v_self, PyObject *__pyx_v_c) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("projectIntensity (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), __pyx_ptype_7pyNADIA_9complex2d_PyComplex2D, 1, "c", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_40projectIntensity(((struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *)__pyx_v_self), ((struct __pyx_obj_7pyNADIA_9complex2d_PyComplex2D *)__pyx_v_c));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_40projectIntensity(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, struct __pyx_obj_7pyNADIA_9complex2d_PyComplex2D *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("projectIntensity", 0);

  /* "pyNADIA/planarcdi.pyx":156
 *         @return A complex field with intensity constraint applied. (PyComplex2D)
 *         """
 *         self.thisptr.project_intensity(deref(c.thisptr))             # <<<<<<<<<<<<<<
 *         return c
 *     def scaleIntensity(self,PyComplex2D c):
 */
  __pyx_v_self->thisptr->project_intensity((*__pyx_v_c->thisptr));

  /* "pyNADIA/planarcdi.pyx":157
 *         """
 *         self.thisptr.project_intensity(deref(c.thisptr))
 *         return c             # <<<<<<<<<<<<<<
 *     def scaleIntensity(self,PyComplex2D c):
 *         """!Intensity is scaled to match the data, error also is updated.
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_c));
  __pyx_r = ((PyObject *)__pyx_v_c);
  goto __pyx_L0;

  /* "pyNADIA/planarcdi.pyx":151
 *         self.thisptr.apply_support(deref(c.thisptr))
 *         return c
 *     def projectIntensity(self, PyComplex2D c):             # <<<<<<<<<<<<<<
 *         """!Apply the intensity constraint
 *         @param c A PyComplex2D to apply to the intensity constraint on
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyNADIA/planarcdi.pyx":158
 *         self.thisptr.project_intensity(deref(c.thisptr))
 *         return c
 *     def scaleIntensity(self,PyComplex2D c):             # <<<<<<<<<<<<<<
 *         """!Intensity is scaled to match the data, error also is updated.
 *         @param c (PyComplex2D) A complex field to apply the intensity scaling on.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_43scaleIntensity(PyObject *__pyx_v_self, PyObject *__pyx_v_c); /*proto*/
static char __pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_42scaleIntensity[] = "!Intensity is scaled to match the data, error also is updated.\n        @param c (PyComplex2D) A complex field to apply the intensity scaling on.\n        @return The scaled complex field (PyComplex2D)\n        ";
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_43scaleIntensity(PyObject *__pyx_v_self, PyObject *__pyx_v_c) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scaleIntensity (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), __pyx_ptype_7pyNADIA_9complex2d_PyComplex2D, 1, "c", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_42scaleIntensity(((struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *)__pyx_v_self), ((struct __pyx_obj_7pyNADIA_9complex2d_PyComplex2D *)__pyx_v_c));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_42scaleIntensity(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, struct __pyx_obj_7pyNADIA_9complex2d_PyComplex2D *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scaleIntensity", 0);

  /* "pyNADIA/planarcdi.pyx":163
 *         @return The scaled complex field (PyComplex2D)
 *         """
 *         self.thisptr.scale_intensity(deref(c.thisptr))             # <<<<<<<<<<<<<<
 *         return c
 *     def propagateToDetector(self,PyComplex2D c):
 */
  __pyx_v_self->thisptr->scale_intensity((*__pyx_v_c->thisptr));

  /* "pyNADIA/planarcdi.pyx":164
 *         """
 *         self.thisptr.scale_intensity(deref(c.thisptr))
 *         return c             # <<<<<<<<<<<<<<
 *     def propagateToDetector(self,PyComplex2D c):
 *         """!Propagate a complex field to the detector plane
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_c));
  __pyx_r = ((PyObject *)__pyx_v_c);
  goto __pyx_L0;

  /* "pyNADIA/planarcdi.pyx":158
 *         self.thisptr.project_intensity(deref(c.thisptr))
 *         return c
 *     def scaleIntensity(self,PyComplex2D c):             # <<<<<<<<<<<<<<
 *         """!Intensity is scaled to match the data, error also is updated.
 *         @param c (PyComplex2D) A complex field to apply the intensity scaling on.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyNADIA/planarcdi.pyx":165
 *         self.thisptr.scale_intensity(deref(c.thisptr))
 *         return c
 *     def propagateToDetector(self,PyComplex2D c):             # <<<<<<<<<<<<<<
 *         """!Propagate a complex field to the detector plane
 *         @param c (PyComplex2D) A complex field to propagate to the detector plane using an fft
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_45propagateToDetector(PyObject *__pyx_v_self, PyObject *__pyx_v_c); /*proto*/
static char __pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_44propagateToDetector[] = "!Propagate a complex field to the detector plane\n        @param c (PyComplex2D) A complex field to propagate to the detector plane using an fft\n        @return the transformed complex field (PyComplex2D)\n        ";
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_45propagateToDetector(PyObject *__pyx_v_self, PyObject *__pyx_v_c) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("propagateToDetector (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), __pyx_ptype_7pyNADIA_9complex2d_PyComplex2D, 1, "c", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_44propagateToDetector(((struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *)__pyx_v_self), ((struct __pyx_obj_7pyNADIA_9complex2d_PyComplex2D *)__pyx_v_c));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_44propagateToDetector(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, struct __pyx_obj_7pyNADIA_9complex2d_PyComplex2D *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("propagateToDetector", 0);

  /* "pyNADIA/planarcdi.pyx":170
 *         @return the transformed complex field (PyComplex2D)
 *         """
 *         self.thisptr.propagate_to_detector(deref(c.thisptr))             # <<<<<<<<<<<<<<
 *     def propagateFromDetector(self,PyComplex2D c):
 *         """!Propagate a complex field to the sample plane
 */
  __pyx_v_self->thisptr->propagate_to_detector((*__pyx_v_c->thisptr));

  /* "pyNADIA/planarcdi.pyx":165
 *         self.thisptr.scale_intensity(deref(c.thisptr))
 *         return c
 *     def propagateToDetector(self,PyComplex2D c):             # <<<<<<<<<<<<<<
 *         """!Propagate a complex field to the detector plane
 *         @param c (PyComplex2D) A complex field to propagate to the detector plane using an fft
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyNADIA/planarcdi.pyx":171
 *         """
 *         self.thisptr.propagate_to_detector(deref(c.thisptr))
 *     def propagateFromDetector(self,PyComplex2D c):             # <<<<<<<<<<<<<<
 *         """!Propagate a complex field to the sample plane
 *         @param c (PyComplex2D) A complex field to propagate to the sample plane using an fft
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_47propagateFromDetector(PyObject *__pyx_v_self, PyObject *__pyx_v_c); /*proto*/
static char __pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_46propagateFromDetector[] = "!Propagate a complex field to the sample plane\n        @param c (PyComplex2D) A complex field to propagate to the sample plane using an fft\n        @return the transformed complex field (PyComplex2D)\n        ";
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_47propagateFromDetector(PyObject *__pyx_v_self, PyObject *__pyx_v_c) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("propagateFromDetector (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), __pyx_ptype_7pyNADIA_9complex2d_PyComplex2D, 1, "c", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_46propagateFromDetector(((struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *)__pyx_v_self), ((struct __pyx_obj_7pyNADIA_9complex2d_PyComplex2D *)__pyx_v_c));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_46propagateFromDetector(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, struct __pyx_obj_7pyNADIA_9complex2d_PyComplex2D *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("propagateFromDetector", 0);

  /* "pyNADIA/planarcdi.pyx":176
 *         @return the transformed complex field (PyComplex2D)
 *         """
 *         self.thisptr.propagate_from_detector(deref(c.thisptr))             # <<<<<<<<<<<<<<
 *     def setFFTWType(self,type):
 *         """Set the fft type
 */
  __pyx_v_self->thisptr->propagate_from_detector((*__pyx_v_c->thisptr));

  /* "pyNADIA/planarcdi.pyx":171
 *         """
 *         self.thisptr.propagate_to_detector(deref(c.thisptr))
 *     def propagateFromDetector(self,PyComplex2D c):             # <<<<<<<<<<<<<<
 *         """!Propagate a complex field to the sample plane
 *         @param c (PyComplex2D) A complex field to propagate to the sample plane using an fft
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyNADIA/planarcdi.pyx":177
 *         """
 *         self.thisptr.propagate_from_detector(deref(c.thisptr))
 *     def setFFTWType(self,type):             # <<<<<<<<<<<<<<
 *         """Set the fft type
 *         @param type FFTW_ESTIMATE, FFTW_MEASURE or FFTW_PATIENT
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_49setFFTWType(PyObject *__pyx_v_self, PyObject *__pyx_v_type); /*proto*/
static char __pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_48setFFTWType[] = "Set the fft type\n        @param type FFTW_ESTIMATE, FFTW_MEASURE or FFTW_PATIENT\n        ";
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_49setFFTWType(PyObject *__pyx_v_self, PyObject *__pyx_v_type) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setFFTWType (wrapper)", 0);
  __pyx_r = __pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_48setFFTWType(((struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *)__pyx_v_self), ((PyObject *)__pyx_v_type));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_48setFFTWType(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, PyObject *__pyx_v_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setFFTWType", 0);

  /* "pyNADIA/planarcdi.pyx":181
 *         @param type FFTW_ESTIMATE, FFTW_MEASURE or FFTW_PATIENT
 *         """
 *         self.thisptr.set_fftw_type(type)             # <<<<<<<<<<<<<<
 *     def setComplexConstraint(self,PyTransmissionConstraint ptc):
 *         """! Sets a complex Constraint.
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_type); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->thisptr->set_fftw_type(__pyx_t_1);

  /* "pyNADIA/planarcdi.pyx":177
 *         """
 *         self.thisptr.propagate_from_detector(deref(c.thisptr))
 *     def setFFTWType(self,type):             # <<<<<<<<<<<<<<
 *         """Set the fft type
 *         @param type FFTW_ESTIMATE, FFTW_MEASURE or FFTW_PATIENT
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyNADIA.planarcdi.PyPlanarCDI.setFFTWType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyNADIA/planarcdi.pyx":182
 *         """
 *         self.thisptr.set_fftw_type(type)
 *     def setComplexConstraint(self,PyTransmissionConstraint ptc):             # <<<<<<<<<<<<<<
 *         """! Sets a complex Constraint.
 *         @param PyTransmissionConstraint ptc
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_51setComplexConstraint(PyObject *__pyx_v_self, PyObject *__pyx_v_ptc); /*proto*/
static char __pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_50setComplexConstraint[] = "! Sets a complex Constraint.\n        @param PyTransmissionConstraint ptc\n        ";
static PyObject *__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_51setComplexConstraint(PyObject *__pyx_v_self, PyObject *__pyx_v_ptc) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setComplexConstraint (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ptc), __pyx_ptype_7pyNADIA_22transmissionconstraint_PyTransmissionConstraint, 1, "ptc", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_50setComplexConstraint(((struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *)__pyx_v_self), ((struct __pyx_obj_7pyNADIA_22transmissionconstraint_PyTransmissionConstraint *)__pyx_v_ptc));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyNADIA_9planarcdi_11PyPlanarCDI_50setComplexConstraint(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI *__pyx_v_self, struct __pyx_obj_7pyNADIA_22transmissionconstraint_PyTransmissionConstraint *__pyx_v_ptc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setComplexConstraint", 0);

  /* "pyNADIA/planarcdi.pyx":186
 *         @param PyTransmissionConstraint ptc
 *         """
 *         self.thisptr.set_complex_constraint(deref(ptc.thisptr))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->thisptr->set_complex_constraint((*__pyx_v_ptc->thisptr));

  /* "pyNADIA/planarcdi.pyx":182
 *         """
 *         self.thisptr.set_fftw_type(type)
 *     def setComplexConstraint(self,PyTransmissionConstraint ptc):             # <<<<<<<<<<<<<<
 *         """! Sets a complex Constraint.
 *         @param PyTransmissionConstraint ptc
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_")
 * cdef string __pyx_convert_string_from_py_(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_")
 * cdef string __pyx_convert_string_from_py_(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_7pyNADIA_9planarcdi_PyPlanarCDI(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7pyNADIA_9planarcdi_PyPlanarCDI(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_7pyNADIA_9planarcdi_PyPlanarCDI[] = {
  {__Pyx_NAMESTR("getIntensityAutocorrelation"), (PyCFunction)__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_5getIntensityAutocorrelation, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_4getIntensityAutocorrelation)},
  {__Pyx_NAMESTR("iterate"), (PyCFunction)__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_7iterate, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_6iterate)},
  {__Pyx_NAMESTR("setRelaxationParameter"), (PyCFunction)__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_9setRelaxationParameter, METH_O, __Pyx_DOCSTR(__pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_8setRelaxationParameter)},
  {__Pyx_NAMESTR("getBestResult"), (PyCFunction)__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_11getBestResult, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_10getBestResult)},
  {__Pyx_NAMESTR("initialiseEstimate"), (PyCFunction)__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_13initialiseEstimate, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_12initialiseEstimate)},
  {__Pyx_NAMESTR("setSupport"), (PyCFunction)__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_15setSupport, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_14setSupport)},
  {__Pyx_NAMESTR("setIntensity"), (PyCFunction)__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_17setIntensity, METH_O, __Pyx_DOCSTR(__pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_16setIntensity)},
  {__Pyx_NAMESTR("setBeamStop"), (PyCFunction)__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_19setBeamStop, METH_O, __Pyx_DOCSTR(__pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_18setBeamStop)},
  {__Pyx_NAMESTR("getSizeX"), (PyCFunction)__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_21getSizeX, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_20getSizeX)},
  {__Pyx_NAMESTR("getSizeY"), (PyCFunction)__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_23getSizeY, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_22getSizeY)},
  {__Pyx_NAMESTR("getExitSurfaceWave"), (PyCFunction)__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_25getExitSurfaceWave, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_24getExitSurfaceWave)},
  {__Pyx_NAMESTR("setAlgorithm"), (PyCFunction)__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_27setAlgorithm, METH_O, __Pyx_DOCSTR(__pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_26setAlgorithm)},
  {__Pyx_NAMESTR("setCustomAlgorithm"), (PyCFunction)__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_29setCustomAlgorithm, METH_O, __Pyx_DOCSTR(__pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_28setCustomAlgorithm)},
  {__Pyx_NAMESTR("printAlgorithm"), (PyCFunction)__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_31printAlgorithm, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_30printAlgorithm)},
  {__Pyx_NAMESTR("getError"), (PyCFunction)__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_33getError, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_32getError)},
  {__Pyx_NAMESTR("applyShrinkwrap"), (PyCFunction)__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_35applyShrinkwrap, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_34applyShrinkwrap)},
  {__Pyx_NAMESTR("getSupport"), (PyCFunction)__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_37getSupport, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_36getSupport)},
  {__Pyx_NAMESTR("applySupport"), (PyCFunction)__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_39applySupport, METH_O, __Pyx_DOCSTR(__pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_38applySupport)},
  {__Pyx_NAMESTR("projectIntensity"), (PyCFunction)__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_41projectIntensity, METH_O, __Pyx_DOCSTR(__pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_40projectIntensity)},
  {__Pyx_NAMESTR("scaleIntensity"), (PyCFunction)__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_43scaleIntensity, METH_O, __Pyx_DOCSTR(__pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_42scaleIntensity)},
  {__Pyx_NAMESTR("propagateToDetector"), (PyCFunction)__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_45propagateToDetector, METH_O, __Pyx_DOCSTR(__pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_44propagateToDetector)},
  {__Pyx_NAMESTR("propagateFromDetector"), (PyCFunction)__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_47propagateFromDetector, METH_O, __Pyx_DOCSTR(__pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_46propagateFromDetector)},
  {__Pyx_NAMESTR("setFFTWType"), (PyCFunction)__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_49setFFTWType, METH_O, __Pyx_DOCSTR(__pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_48setFFTWType)},
  {__Pyx_NAMESTR("setComplexConstraint"), (PyCFunction)__pyx_pw_7pyNADIA_9planarcdi_11PyPlanarCDI_51setComplexConstraint, METH_O, __Pyx_DOCSTR(__pyx_doc_7pyNADIA_9planarcdi_11PyPlanarCDI_50setComplexConstraint)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7pyNADIA_9planarcdi_PyPlanarCDI = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pyNADIA.planarcdi.PyPlanarCDI"), /*tp_name*/
  sizeof(struct __pyx_obj_7pyNADIA_9planarcdi_PyPlanarCDI), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7pyNADIA_9planarcdi_PyPlanarCDI, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("!PyPlanarCDI is a wrapper class for the PlanarCDI class. \n    Wrapper around the PlanarCDI class and provides Python only access to its methods.\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7pyNADIA_9planarcdi_PyPlanarCDI, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7pyNADIA_9planarcdi_PyPlanarCDI, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    __Pyx_NAMESTR("planarcdi"),
    __Pyx_DOCSTR(__pyx_k_package_pyNADIA_planarcdi_Pytho), /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_argument_must_be_an_array_of_10, __pyx_k_argument_must_be_an_array_of_10, sizeof(__pyx_k_argument_must_be_an_array_of_10), 0, 0, 1, 0},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_gauss_width, __pyx_k_gauss_width, sizeof(__pyx_k_gauss_width), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_length, __pyx_k_length, sizeof(__pyx_k_length), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_n_best, __pyx_k_n_best, sizeof(__pyx_k_n_best), 0, 0, 1, 1},
  {&__pyx_n_s_object_estimate, __pyx_k_object_estimate, sizeof(__pyx_k_object_estimate), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_seed, __pyx_k_seed, sizeof(__pyx_k_seed), 0, 0, 1, 1},
  {&__pyx_n_s_soften, __pyx_k_soften, sizeof(__pyx_k_soften), 0, 0, 1, 1},
  {&__pyx_n_s_support, __pyx_k_support, sizeof(__pyx_k_support), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_threshold, __pyx_k_threshold, sizeof(__pyx_k_threshold), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_exit = __Pyx_GetBuiltinName(__pyx_n_s_exit); if (!__pyx_builtin_exit) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_float_0_1 = PyFloat_FromDouble(0.1); if (unlikely(!__pyx_float_0_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_float_1_5 = PyFloat_FromDouble(1.5); if (unlikely(!__pyx_float_1_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_10 = PyInt_FromLong(10); if (unlikely(!__pyx_int_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initplanarcdi(void); /*proto*/
PyMODINIT_FUNC initplanarcdi(void)
#else
PyMODINIT_FUNC PyInit_planarcdi(void); /*proto*/
PyMODINIT_FUNC PyInit_planarcdi(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_planarcdi(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("planarcdi"), __pyx_methods, __Pyx_DOCSTR(__pyx_k_package_pyNADIA_planarcdi_Pytho), 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_pyNADIA__planarcdi) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "pyNADIA.planarcdi")) {
      if (unlikely(PyDict_SetItemString(modules, "pyNADIA.planarcdi", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_7pyNADIA_9planarcdi_PyPlanarCDI) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_7pyNADIA_9planarcdi_PyPlanarCDI.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "PyPlanarCDI", (PyObject *)&__pyx_type_7pyNADIA_9planarcdi_PyPlanarCDI) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7pyNADIA_9planarcdi_PyPlanarCDI = &__pyx_type_7pyNADIA_9planarcdi_PyPlanarCDI;
  /*--- Type import code ---*/
  __pyx_ptype_7pyNADIA_8double2d_PyDouble2D = __Pyx_ImportType("pyNADIA.double2d", "PyDouble2D", sizeof(struct __pyx_obj_7pyNADIA_8double2d_PyDouble2D), 1); if (unlikely(!__pyx_ptype_7pyNADIA_8double2d_PyDouble2D)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7pyNADIA_9complex2d_PyComplex2D = __Pyx_ImportType("pyNADIA.complex2d", "PyComplex2D", sizeof(struct __pyx_obj_7pyNADIA_9complex2d_PyComplex2D), 1); if (unlikely(!__pyx_ptype_7pyNADIA_9complex2d_PyComplex2D)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7pyNADIA_22transmissionconstraint_PyComplexConstraint = __Pyx_ImportType("pyNADIA.transmissionconstraint", "PyComplexConstraint", sizeof(struct __pyx_obj_7pyNADIA_22transmissionconstraint_PyComplexConstraint), 1); if (unlikely(!__pyx_ptype_7pyNADIA_22transmissionconstraint_PyComplexConstraint)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7pyNADIA_22transmissionconstraint_PyTransmissionConstraint = __Pyx_ImportType("pyNADIA.transmissionconstraint", "PyTransmissionConstraint", sizeof(struct __pyx_obj_7pyNADIA_22transmissionconstraint_PyTransmissionConstraint), 1); if (unlikely(!__pyx_ptype_7pyNADIA_22transmissionconstraint_PyTransmissionConstraint)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7pyNADIA_7basecdi_PyBaseCDI = __Pyx_ImportType("pyNADIA.basecdi", "PyBaseCDI", sizeof(struct __pyx_obj_7pyNADIA_7basecdi_PyBaseCDI), 1); if (unlikely(!__pyx_ptype_7pyNADIA_7basecdi_PyBaseCDI)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "pyNADIA/planarcdi.pyx":1
 * """!@package pyNADIA.planarcdi             # <<<<<<<<<<<<<<
 * Python interface to the PlanarCDI class.
 * 
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_")
 * cdef string __pyx_convert_string_from_py_(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    __Pyx_AddTraceback("init pyNADIA.planarcdi", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pyNADIA.planarcdi");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
#if PY_VERSION_HEX >= 0x02060000
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
#endif
    result = (*call)(func, arg, kw);
#if PY_VERSION_HEX >= 0x02060000
    Py_LeaveRecursiveCall();
#endif
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func)             \
    {                                                                     \
        func_type value = func(x);                                        \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                PyErr_SetString(PyExc_OverflowError,                      \
                    (is_unsigned && unlikely(value < zero)) ?             \
                    "can't convert negative value to " #target_type :     \
                    "value too large to convert to " #target_type);       \
                return (target_type) -1;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int");
                return (int) -1;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int");
                return (int) -1;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(int) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong)
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else /* Python 3 has a print function */
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else /* Python 3 has a print function */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long) -1;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long) -1;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong)
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        #if PY_VERSION_HEX < 0x02050000
        if (PyErr_Warn(NULL, warning) < 0) goto bad;
        #else
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
        #endif
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif /*__PYX_DEFAULT_STRING_ENCODING_IS_ASCII*/
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else /* PY_VERSION_HEX < 0x03030000 */
        if (PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
        return PyUnicode_AsUTF8AndSize(o, length);
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
#endif /* PY_VERSION_HEX < 0x03030000 */
    } else
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII  || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT */
#if !CYTHON_COMPILING_IN_PYPY
#if PY_VERSION_HEX >= 0x02060000
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
  #if PY_VERSION_HEX < 0x02060000
    return PyInt_AsSsize_t(b);
  #else
    return PyLong_AsSsize_t(b);
  #endif
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}


#endif /* Py_PYTHON_H */
